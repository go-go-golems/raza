// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: raza_shell.proto

package raza

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RazaShellWrapperClient is the client API for RazaShellWrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RazaShellWrapperClient interface {
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error)
	StartCommand(ctx context.Context, in *StartCommandRequest, opts ...grpc.CallOption) (*StartCommandResponse, error)
	EndSessionsLastCommand(ctx context.Context, in *EndSessionsLastCommandRequest, opts ...grpc.CallOption) (*EndCommandResponse, error)
}

type razaShellWrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewRazaShellWrapperClient(cc grpc.ClientConnInterface) RazaShellWrapperClient {
	return &razaShellWrapperClient{cc}
}

func (c *razaShellWrapperClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, "/raza.RazaShellWrapper/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *razaShellWrapperClient) EndSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*EndSessionResponse, error) {
	out := new(EndSessionResponse)
	err := c.cc.Invoke(ctx, "/raza.RazaShellWrapper/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *razaShellWrapperClient) StartCommand(ctx context.Context, in *StartCommandRequest, opts ...grpc.CallOption) (*StartCommandResponse, error) {
	out := new(StartCommandResponse)
	err := c.cc.Invoke(ctx, "/raza.RazaShellWrapper/StartCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *razaShellWrapperClient) EndSessionsLastCommand(ctx context.Context, in *EndSessionsLastCommandRequest, opts ...grpc.CallOption) (*EndCommandResponse, error) {
	out := new(EndCommandResponse)
	err := c.cc.Invoke(ctx, "/raza.RazaShellWrapper/EndSessionsLastCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RazaShellWrapperServer is the server API for RazaShellWrapper service.
// All implementations must embed UnimplementedRazaShellWrapperServer
// for forward compatibility
type RazaShellWrapperServer interface {
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error)
	StartCommand(context.Context, *StartCommandRequest) (*StartCommandResponse, error)
	EndSessionsLastCommand(context.Context, *EndSessionsLastCommandRequest) (*EndCommandResponse, error)
	mustEmbedUnimplementedRazaShellWrapperServer()
}

// UnimplementedRazaShellWrapperServer must be embedded to have forward compatible implementations.
type UnimplementedRazaShellWrapperServer struct {
}

func (UnimplementedRazaShellWrapperServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedRazaShellWrapperServer) EndSession(context.Context, *EndSessionRequest) (*EndSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedRazaShellWrapperServer) StartCommand(context.Context, *StartCommandRequest) (*StartCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCommand not implemented")
}
func (UnimplementedRazaShellWrapperServer) EndSessionsLastCommand(context.Context, *EndSessionsLastCommandRequest) (*EndCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSessionsLastCommand not implemented")
}
func (UnimplementedRazaShellWrapperServer) mustEmbedUnimplementedRazaShellWrapperServer() {}

// UnsafeRazaShellWrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RazaShellWrapperServer will
// result in compilation errors.
type UnsafeRazaShellWrapperServer interface {
	mustEmbedUnimplementedRazaShellWrapperServer()
}

func RegisterRazaShellWrapperServer(s grpc.ServiceRegistrar, srv RazaShellWrapperServer) {
	s.RegisterService(&RazaShellWrapper_ServiceDesc, srv)
}

func _RazaShellWrapper_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazaShellWrapperServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raza.RazaShellWrapper/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazaShellWrapperServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RazaShellWrapper_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazaShellWrapperServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raza.RazaShellWrapper/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazaShellWrapperServer).EndSession(ctx, req.(*EndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RazaShellWrapper_StartCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazaShellWrapperServer).StartCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raza.RazaShellWrapper/StartCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazaShellWrapperServer).StartCommand(ctx, req.(*StartCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RazaShellWrapper_EndSessionsLastCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionsLastCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazaShellWrapperServer).EndSessionsLastCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raza.RazaShellWrapper/EndSessionsLastCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazaShellWrapperServer).EndSessionsLastCommand(ctx, req.(*EndSessionsLastCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RazaShellWrapper_ServiceDesc is the grpc.ServiceDesc for RazaShellWrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RazaShellWrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raza.RazaShellWrapper",
	HandlerType: (*RazaShellWrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _RazaShellWrapper_StartSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _RazaShellWrapper_EndSession_Handler,
		},
		{
			MethodName: "StartCommand",
			Handler:    _RazaShellWrapper_StartCommand_Handler,
		},
		{
			MethodName: "EndSessionsLastCommand",
			Handler:    _RazaShellWrapper_EndSessionsLastCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raza_shell.proto",
}
